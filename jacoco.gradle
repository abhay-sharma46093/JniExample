apply plugin: 'jacoco'

jacoco {
  toolVersion = "0.8.7"
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
  jacoco.excludes = ['jdk.internal.*']
}
task jacocoInstrumentationTestReport(type: JacocoReport, dependsOn: ['createDebugCoverageReport']) {
  group "Reporting"
  description "Generate Jacoco coverage reports."
  reports {
    xml.enabled = true
    html.enabled = true
    html.destination file("${rootProject.buildDir}/coverage-report")
  }
  def javaClasses = []
  def kotlinClasses = []
  def javaSrc = []
  def kotlinSrc = []
  def execution = []

  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']

  rootProject.subprojects.each { proj ->
    javaClasses << fileTree(dir: "$proj.buildDir/intermediates/javac/debug", excludes: fileFilter)
    kotlinClasses << fileTree(dir: "$proj.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    javaSrc << "$proj.projectDir/src/main/java"
    kotlinSrc << "$proj.projectDir/src/main/kotlin"
    execution << fileTree(dir: proj.buildDir,
      includes: ['jacoco/testDebugUnitTest.exec',
        'outputs/code-coverage/connected/*coverage.ec',
        'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'])
  }
  sourceDirectories.from = files(javaSrc, kotlinSrc)
  classDirectories.from = files(javaClasses, kotlinClasses)
  print execution
  executionData.from = files(execution)
  doLast() {
    print "file://${reports.html.destination}/index.html"
  }
}
